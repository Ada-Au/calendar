### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AffectedRowsOutput {
  count: Int!
}

"""Authentication Payload."""
type AuthPayload {
  """Authentication token."""
  token: String!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  createOneTask(data: TaskCreateInput!): Task!
  createOneTodo(data: TodoCreateInput!): Todo!
  createOneUser(data: UserCreateInput!): User!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOneUser(where: UserWhereUniqueInput!): User

  """Normal email and password login."""
  login(
    """The user account email."""
    email: String!

    """The user account password."""
    password: String!
  ): AuthPayload!

  """User sign up in site."""
  signUp(
    """The user account email."""
    email: String!

    """The user name."""
    name: String!

    """The user account password."""
    password: String!
  ): AuthPayload!

  """Toggle the completeness of Todo."""
  toggleCompleteTodo(
    """The id of the todo."""
    id: Int!
  ): Todo!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOneTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateOneTodo(data: TodoUpdateInput!, where: TodoWhereUniqueInput!): Todo
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  """Get my user data"""
  me: User
  task(where: TaskWhereUniqueInput!): Task
  tasks(cursor: TaskWhereUniqueInput, orderBy: [TaskOrderByInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  todo(where: TodoWhereUniqueInput!): Todo
  todos(cursor: TodoWhereUniqueInput, orderBy: [TodoOrderByInput!], skip: Int, take: Int, where: TodoWhereInput): [Todo!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  usersCount(cursor: UserWhereUniqueInput, orderBy: UserOrderByInput, skip: Int, take: Int, where: UserWhereInput): Int
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

"""Task for event on calendar."""
type Task {
  """Check if event is completed."""
  completed: Boolean!
  createdAt: DateTime!
  description: String

  """The starting time of event. Must be set if not full day."""
  endTime: DateTime
  id: Int!

  """Show that the event is full day. Default as fault"""
  isFullDay: Boolean!

  """
  The starting time of event. Default as create time. Use for getting the date if event is full day.
  """
  startTime: DateTime!
  title: String!

  """The todos of this task"""
  todos(cursor: TodoWhereUniqueInput, orderBy: [TodoOrderByInput!], skip: Int, take: Int, where: TodoWhereInput): [Todo!]!
}

input TaskCreateInput {
  completed: Boolean
  createdAt: DateTime
  description: String
  endTime: DateTime
  isFullDay: Boolean
  startTime: DateTime
  title: String!
  todos: TodoCreateNestedManyWithoutTaskInput
  user: UserCreateNestedOneWithoutTasksInput!
}

input TaskCreateNestedManyWithoutUserInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutUserInput!]
  create: [TaskCreateWithoutUserInput!]
}

input TaskCreateNestedOneWithoutTodosInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutTodosInput
  create: TaskCreateWithoutTodosInput
}

input TaskCreateOrConnectWithoutTodosInput {
  create: TaskCreateWithoutTodosInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutUserInput {
  create: TaskCreateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateWithoutTodosInput {
  completed: Boolean
  createdAt: DateTime
  description: String
  endTime: DateTime
  isFullDay: Boolean
  startTime: DateTime
  title: String!
  user: UserCreateNestedOneWithoutTasksInput!
}

input TaskCreateWithoutUserInput {
  completed: Boolean
  createdAt: DateTime
  description: String
  endTime: DateTime
  isFullDay: Boolean
  startTime: DateTime
  title: String!
  todos: TodoCreateNestedManyWithoutTaskInput
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

input TaskOrderByInput {
  completed: SortOrder
  createdAt: SortOrder
  description: SortOrder
  endTime: SortOrder
  id: SortOrder
  isFullDay: SortOrder
  startTime: SortOrder
  title: SortOrder
  user: UserOrderByInput
  userId: SortOrder
}

input TaskScalarWhereInput {
  AND: [TaskScalarWhereInput!]
  NOT: [TaskScalarWhereInput!]
  OR: [TaskScalarWhereInput!]
  completed: BoolFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  endTime: DateTimeNullableFilter
  id: IntFilter
  isFullDay: BoolFilter
  startTime: DateTimeFilter
  title: StringFilter
  userId: IntFilter
}

input TaskUpdateInput {
  completed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  endTime: NullableDateTimeFieldUpdateOperationsInput
  isFullDay: BoolFieldUpdateOperationsInput
  startTime: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  todos: TodoUpdateManyWithoutTaskInput
  user: UserUpdateOneRequiredWithoutTasksInput
}

input TaskUpdateManyMutationInput {
  completed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  endTime: NullableDateTimeFieldUpdateOperationsInput
  isFullDay: BoolFieldUpdateOperationsInput
  startTime: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input TaskUpdateManyWithWhereWithoutUserInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateManyWithoutUserInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutUserInput!]
  create: [TaskCreateWithoutUserInput!]
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutUserInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutUserInput!]
}

input TaskUpdateOneWithoutTodosInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutTodosInput
  create: TaskCreateWithoutTodosInput
  delete: Boolean
  disconnect: Boolean
  update: TaskUpdateWithoutTodosInput
  upsert: TaskUpsertWithoutTodosInput
}

input TaskUpdateWithWhereUniqueWithoutUserInput {
  data: TaskUpdateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithoutTodosInput {
  completed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  endTime: NullableDateTimeFieldUpdateOperationsInput
  isFullDay: BoolFieldUpdateOperationsInput
  startTime: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTasksInput
}

input TaskUpdateWithoutUserInput {
  completed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  endTime: NullableDateTimeFieldUpdateOperationsInput
  isFullDay: BoolFieldUpdateOperationsInput
  startTime: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  todos: TodoUpdateManyWithoutTaskInput
}

input TaskUpsertWithWhereUniqueWithoutUserInput {
  create: TaskCreateWithoutUserInput!
  update: TaskUpdateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskUpsertWithoutTodosInput {
  create: TaskCreateWithoutTodosInput!
  update: TaskUpdateWithoutTodosInput!
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  completed: BoolFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  endTime: DateTimeNullableFilter
  id: IntFilter
  isFullDay: BoolFilter
  startTime: DateTimeFilter
  title: StringFilter
  todos: TodoListRelationFilter
  user: UserWhereInput
  userId: IntFilter
}

input TaskWhereUniqueInput {
  id: Int
}

"""Todo for each Task."""
type Todo {
  """Check if todo is completed."""
  completed: Boolean!
  createdAt: DateTime!
  description: String
  id: Int!

  """The task this todo belongs to."""
  task: Task
  title: String!

  """When the todo is last updated."""
  updatedAt: DateTime!
}

input TodoCreateInput {
  completed: Boolean
  createdAt: DateTime
  description: String
  task: TaskCreateNestedOneWithoutTodosInput
  title: String!
  updatedAt: DateTime
}

input TodoCreateNestedManyWithoutTaskInput {
  connect: [TodoWhereUniqueInput!]
  connectOrCreate: [TodoCreateOrConnectWithoutTaskInput!]
  create: [TodoCreateWithoutTaskInput!]
}

input TodoCreateOrConnectWithoutTaskInput {
  create: TodoCreateWithoutTaskInput!
  where: TodoWhereUniqueInput!
}

input TodoCreateWithoutTaskInput {
  completed: Boolean
  createdAt: DateTime
  description: String
  title: String!
  updatedAt: DateTime
}

input TodoListRelationFilter {
  every: TodoWhereInput
  none: TodoWhereInput
  some: TodoWhereInput
}

input TodoOrderByInput {
  completed: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  task: TaskOrderByInput
  taskId: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input TodoScalarWhereInput {
  AND: [TodoScalarWhereInput!]
  NOT: [TodoScalarWhereInput!]
  OR: [TodoScalarWhereInput!]
  completed: BoolFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: IntFilter
  taskId: IntNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input TodoUpdateInput {
  completed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  task: TaskUpdateOneWithoutTodosInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TodoUpdateManyMutationInput {
  completed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TodoUpdateManyWithWhereWithoutTaskInput {
  data: TodoUpdateManyMutationInput!
  where: TodoScalarWhereInput!
}

input TodoUpdateManyWithoutTaskInput {
  connect: [TodoWhereUniqueInput!]
  connectOrCreate: [TodoCreateOrConnectWithoutTaskInput!]
  create: [TodoCreateWithoutTaskInput!]
  delete: [TodoWhereUniqueInput!]
  deleteMany: [TodoScalarWhereInput!]
  disconnect: [TodoWhereUniqueInput!]
  set: [TodoWhereUniqueInput!]
  update: [TodoUpdateWithWhereUniqueWithoutTaskInput!]
  updateMany: [TodoUpdateManyWithWhereWithoutTaskInput!]
  upsert: [TodoUpsertWithWhereUniqueWithoutTaskInput!]
}

input TodoUpdateWithWhereUniqueWithoutTaskInput {
  data: TodoUpdateWithoutTaskInput!
  where: TodoWhereUniqueInput!
}

input TodoUpdateWithoutTaskInput {
  completed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TodoUpsertWithWhereUniqueWithoutTaskInput {
  create: TodoCreateWithoutTaskInput!
  update: TodoUpdateWithoutTaskInput!
  where: TodoWhereUniqueInput!
}

input TodoWhereInput {
  AND: [TodoWhereInput!]
  NOT: [TodoWhereInput!]
  OR: [TodoWhereInput!]
  completed: BoolFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: IntFilter
  task: TaskWhereInput
  taskId: IntNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input TodoWhereUniqueInput {
  id: Int
}

"""The User Account data."""
type User {
  """The timestamp (UTC in ISO 9601 Standard) this user was created."""
  createdAt: DateTime!

  """
  The user email used to create and uniquely identify this account and user data.
  """
  email: String!
  id: Int!

  """The name of the user."""
  name: String!

  """The user account password."""
  password: String!

  """Tasks that belong to the user"""
  tasks(cursor: TaskWhereUniqueInput, skip: Int, take: Int): [Task!]!
}

input UserCreateInput {
  createdAt: DateTime
  email: String!
  name: String!
  password: String!
  tasks: TaskCreateNestedManyWithoutUserInput
}

input UserCreateNestedOneWithoutTasksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTasksInput
  create: UserCreateWithoutTasksInput
}

input UserCreateOrConnectWithoutTasksInput {
  create: UserCreateWithoutTasksInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutTasksInput {
  createdAt: DateTime
  email: String!
  name: String!
  password: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  tasks: TaskUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutTasksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTasksInput
  create: UserCreateWithoutTasksInput
  update: UserUpdateWithoutTasksInput
  upsert: UserUpsertWithoutTasksInput
}

input UserUpdateWithoutTasksInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUpsertWithoutTasksInput {
  create: UserCreateWithoutTasksInput!
  update: UserUpdateWithoutTasksInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  name: StringFilter
  password: StringFilter
  tasks: TaskListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
